name: Nightly build
on:
  schedule:
    - cron: "0 14 * * *" # every night at 2am
  push:
    paths:
      - "installers/win-installer"
      - ".github/workflows/nightly-build.yaml"
      - "install_nightly.R"
      - "install_nightly_guinz.R"
      - "install_gtk.cmd"

jobs:
  build:
    name: Build nightly installer
    runs-on: windows-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      TZ: "Pacific/Auckland"
      R_COMPILE_AND_INSTALL_PACKAGES: "never"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: 4.1

      - name: Set R version env var
        id: r-version
        run: echo "::set-output name=ver::$(Rscript rversion.R)"

#       - name: Install RGtk2
#         run: ./install_gtk.cmd
#         shell: bash

#       - name: Add GTK to PATH
#         run: echo "${{env.R_LIBS_USER}}\RGtk2\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

#       - name: Check RGtk2
#         run: |
#           library(RGtk2)
#           gtkWindowNew()
#         shell: Rscript {0}

      - name: Install packages
        run: Rscript install_nightly.R

      - name: Set iNZight version
        id: inzight
        run: echo "::set-output name=version::$(Rscript nightly_version.R)"
        
      - name: Download GTK+
        run: |
          curl -L -o gtk.zip http://ftp.gnome.org/pub/gnome/binaries/win64/gtk+/2.22/gtk+-bundle_2.22.1-20101229_win64.zip
          mkdir -p gtk/x64
          cd gtk/x64
          7z x ../../gtk.zip
      - name: Add GTK+ to R library
        run: |
          mv gtk ${{ env.R_LIBS_USER }}/RGtk2

      # - name: Download GTK+
      #   run: |
      #     curl -L http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.22/gtk+-bundle_2.22.1-20101227_win32.zip -o gtk32.zip
      #     mkdir -p gtk/i386
      #     cd gtk/i386
      #     7z x ../../gtk32.zip

      # - name: Replace GTK+ with 32bit
      #   run: |
      #     rm -r ${{ env.R_LIBS_USER }}/RGtk2/gtk
      #     mv gtk ${{ env.R_LIBS_USER }}/RGtk2

      - name: Move R and library to build location
        working-directory: installers/win-installer
        run: |
          mv C:/R R
          mv ${{ env.R_LIBS_USER }} library

      - name: Configure R GUI
        working-directory: installers/win-installer
        run: R\bin\Rscript.exe rgui_settings.R

      - name: Build installer
        working-directory: installers/win-installer
        run: makensis.exe inzight_installer.nsi
        env:
          INSTALLER_VERSION: ${{ steps.inzight.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --use-feature=2020-resolver -r ./requirements.txt

      - name: Generate credentials
        run: |
          python aws_saml_login.py `
            --user ${{ secrets.AWS_USER }} `
            --password ${{ secrets.AWS_PASS}} `
            --token ${{ secrets.AWS_TOKEN }} `
            --idp iam.auckland.ac.nz

      - name: Pull downloads dir
        run: |
          aws --profile saml s3 sync `
            --exclude *.zip --exclude *.exe --exclude *.bz2 --exclude *.dmg `
            s3://r.docker.stat.auckland.ac.nz/downloads downloads

      - name: Move installer and setup symlink
        run: |
          mv installers/win-installer/iNZightVIT-installer.exe `
            downloads/iNZightVIT-installer-nightly.exe

      - name: Add Version file
        run: echo "${{ steps.inzight.outputs.version }}" > downloads/VERSION-nightly

      - name: Upload installer
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      - name: Generate index.html
        run: |
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/ > downloads.txt
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/Windows/ > downloads_Windows.txt
          Rscript create_index.R downloads downloads/Windows

      - name: Push indices
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      # - name: Create dev dir
      #   run: |
      #     mkdir -p dev/bin/windows/contrib/${{ steps.r-version.outputs.ver }}

      # - name: Zip binaries for our packages
      #   run: |
      #     pkgs_all <- list.files('library')
      #     pkgs_keep <- list.files('installers/win-installer/library')
      #     pkgs <- pkgs_all[pkgs_all %in% pkgs_keep]
      #     rv <- paste(strsplit(as.character(getRversion()), "\\.")[[1]][1:2],
      #       collapse = ".")
      #     dir <- file.path('bin', 'windows', 'contrib', rv)
      #     sapply(pkgs,
      #       function(pkg) {
      #         file.rename(
      #           file.path('library', pkg),
      #           file.path(dir, pkg)
      #         )
      #       }
      #     )
      #     tools::write_PACKAGES(dir, verbose = TRUE)
      #   shell: Rscript {0}

      # - name: Push dev repository
      #   run: |
      #     aws --profile saml s3 sync --delete `
      #       bin/windows/contrib/${{ steps.r-version.outputs.ver }} `
      #       s3://r.docker.stat.auckland.ac.nz/dev/bin/windows/contrib/${{ steps.r-version.outputs.ver }}

      # - name: Generate dev index.html
      #   run: |
      #     aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/dev/ > dev.txt
      #     Rscript create_index.R dev

      # - name: Push dev indices
      #   run: |
      #     aws --profile saml s3 sync `
      #       dev s3://r.docker.stat.auckland.ac.nz/dev

      - name: Clear cache
        run: |
          aws --profile 'saml' `
            cloudfront `
            create-invalidation `
            --distribution-id ${{ secrets.AWS_ID }} `
            --paths "/*"

  build-guinz:
    name: Build nightly GUINZ installer
    runs-on: windows-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      TZ: "Pacific/Auckland"
      R_COMPILE_AND_INSTALL_PACKAGES: "never"

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: 4.1

      - name: Set R version env var
        id: r-version
        run: echo "::set-output name=ver::$(Rscript rversion.R)"

#       - name: Install RGtk2
#         run: ./install_gtk.cmd
#         shell: bash

#       - name: Add GTK to PATH
#         run: echo "${{env.R_LIBS_USER}}\RGtk2\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

#       - name: Check RGtk2
#         run: |
#           library(RGtk2)
#           gtkWindowNew()
#         shell: Rscript {0}

      - name: Install packages
        run: Rscript install_nightly_guinz.R

      - name: Set iNZight version
        id: inzight
        run: echo "::set-output name=version::$(Rscript nightly_version.R)"
        
      - name: Download GTK+
        run: |
          curl -L -o gtk.zip http://ftp.gnome.org/pub/gnome/binaries/win64/gtk+/2.22/gtk+-bundle_2.22.1-20101229_win64.zip
          mkdir -p gtk/x64
          cd gtk/x64
          7z x ../../gtk.zip
          
      - name: Add GTK+ to R library
        run: |
          mv gtk ${{ env.R_LIBS_USER }}/RGtk2

      - name: Move R and library to build location
        working-directory: installers/win-installer
        run: |
          mv C:/R R
          mv ${{ env.R_LIBS_USER }} library

      - name: Configure R GUI
        working-directory: installers/win-installer
        run: R\bin\Rscript.exe rgui_settings.R

      - name: Build installer
        working-directory: installers/win-installer
        run: makensis.exe inzight_installer.nsi
        env:
          INSTALLER_VERSION: ${{ steps.inzight.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --use-feature=2020-resolver -r ./requirements.txt

      - name: Generate credentials
        run: |
          python aws_saml_login.py `
            --user ${{ secrets.AWS_USER }} `
            --password ${{ secrets.AWS_PASS}} `
            --token ${{ secrets.AWS_TOKEN }} `
            --idp iam.auckland.ac.nz

      - name: Pull downloads dir
        run: |
          aws --profile saml s3 sync `
            --exclude *.zip --exclude *.exe --exclude *.bz2 --exclude *.dmg `
            s3://r.docker.stat.auckland.ac.nz/downloads downloads

      - name: Move installer and setup symlink
        run: |
          mv installers/win-installer/iNZightVIT-installer.exe `
            downloads/iNZightVIT-installer-nightly-guinz.exe

      - name: Upload installer
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      - name: Generate index.html
        run: |
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/ > downloads.txt
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/Windows/ > downloads_Windows.txt
          Rscript create_index.R downloads downloads/Windows

      - name: Push indices
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      - name: Clear cache
        run: |
          aws --profile 'saml' `
            cloudfront `
            create-invalidation `
            --distribution-id ${{ secrets.AWS_ID }} `
            --paths "/*"

  update-website:
    name: Update website
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Send signal
        uses: peter-evans/repository-dispatch@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          repository: iNZightVIT/inzight-www
          event-type: update-website
          client-payload: '{"ref": "master"}'
