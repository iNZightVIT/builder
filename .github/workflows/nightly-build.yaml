name: Nightly build
on:
  schedule:
    - cron: '0 14 * * *' # every night at 2am
  push:
    paths:
    - 'installers/win-installer'

jobs:
  build:
    name: Build nightly installer
    runs-on: windows-latest
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      TZ: "Pacific/Auckland"
    steps:

      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: 'release'

      - name: Install RGtk2
        run: library/iNZight/.github/install_gtk.cmd
        shell: bash

      - name: Add GTK to PATH
        run: echo "${{env.R_LIBS_USER}}\RGtk2\gtk\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Check RGtk2
        run: |
          library(RGtk2)
          gtkWindowNew()
        shell: Rscript {0}

      - name: Install packages
        run: Rscript install_nightly.R

      - name: Set iNZight version
        id: inzight
        run: echo "::set-output name=version::$(Rscript nightly_version.R)"

      - name: Download GTK+
        run: |
          curl -L http://ftp.gnome.org/pub/gnome/binaries/win32/gtk+/2.22/gtk+-bundle_2.22.1-20101227_win32.zip -o gtk32.zip
          mkdir -p gtk/i386
          cd gtk/i386
          7z x ../../gtk32.zip

      - name: Replace GTK+ with 32bit
        run: |
          rm -r ${{ env.R_LIBS_USER }}/RGtk2/gtk
          mv gtk ${{ env.R_LIBS_USER }}/RGtk2

      - name: Move R and library to build location
        working-directory: installers/win-installer
        run: |
          mv C:/R R
          mv ${{ env.R_LIBS_USER }} library

      - name: Configure R GUI
        working-directory: installers/win-installer
        run: R\bin\Rscript.exe rgui_settings.R

      - name: Build installer
        working-directory: installers/win-installer
        run: makensis.exe inzight_installer.nsi
        env:
          INSTALLER_VERSION: ${{ steps.inzight.outputs.version }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.6

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --use-feature=2020-resolver -r ./requirements.txt

      - name: Generate credentials
        run: |
          python aws_saml_login.py `
            --user ${{ secrets.AWS_USER }} `
            --password ${{ secrets.AWS_PASS}} `
            --token ${{ secrets.AWS_TOKEN }} `
            --idp iam.auckland.ac.nz

      - name: Pull downloads dir
        run: |
          aws --profile saml s3 sync `
            --exclude *.zip --exclude *.exe --exclude *.bz2 --exclude *.dmg `
            s3://r.docker.stat.auckland.ac.nz/downloads downloads

      - name: Move installer and setup symlink
        run: |
          mv installers/win-installer/iNZightVIT-installer.exe `
            downloads/Windows/iNZightVIT-installer-${{ steps.inzight.outputs.version }}.exe
          ln -s Windows/iNZightVIT-installer-${{ steps.inzight.outputs.version }}.exe `
            downloads/iNZightVIT-installer-nightly.exe

      - name: Add Version file
        run: echo "${{ steps.inzight.outputs.version }}" > downloads/VERSION-nightly

      - name: Upload installer
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      - name: Generate index.html
        run: |
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/ > downloads.txt
          aws --profile saml s3 ls s3://r.docker.stat.auckland.ac.nz/downloads/Windows/ > downloads_Windows.txt
          Rscript create_index.R downloads downloads/Windows

      - name: Push indices
        run: |
          aws --profile saml s3 sync `
            downloads s3://r.docker.stat.auckland.ac.nz/downloads

      - name: Clear cache
        run: |
          aws --profile 'saml' `
            cloudfront `
            create-invalidation `
            --distribution-id ${{ secrets.AWS_ID }} `
            --paths "/*"

  update-website:
    name: Update website
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Send signal
        run: |
          curl -XPOST \
            -u "${{ secrets.PAT_USERNAME }}:${{ secrets.PAT_SECRET }}" \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Content-Type: application/json" \
            https://api.github.com/repos/iNZightVIT/inzight-www/actions/workflows/update-version.yaml/dispatches \
            --data '{"ref": "master"}'
